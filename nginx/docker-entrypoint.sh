#!/bin/sh
set -e

# This script generates /etc/nginx/conf.d/default.conf based on ACTIVE_POOL
# and then runs nginx in foreground. Supports nginx -s reload.

ACTIVE_POOL=${ACTIVE_POOL:-blue}
BLUE_HOST=${BLUE_SERVICE_HOST:-app_blue}
GREEN_HOST=${GREEN_SERVICE_HOST:-app_green}
APP_PORT=${APP_PORT:-3000}
NGINX_CONF=/etc/nginx/conf.d/default.conf

generate_conf() {
  # Decide primary and backup based on ACTIVE_POOL
  if [ "$ACTIVE_POOL" = "green" ]; then
    PRIMARY_HOST=$GREEN_HOST
    BACKUP_HOST=$BLUE_HOST
    PRIMARY_NAME=green
    BACKUP_NAME=blue
  else
    PRIMARY_HOST=$BLUE_HOST
    BACKUP_HOST=$GREEN_HOST
    PRIMARY_NAME=blue
    BACKUP_NAME=green
  fi

  cat > "$NGINX_CONF" <<EOF
# autogenerated by docker-entrypoint.sh - ACTIVE_POOL=${ACTIVE_POOL}

upstream backend_upstream {
    # Primary server: short fail window and small max_fails so failures are detected quickly.
    server ${PRIMARY_HOST}:${APP_PORT} max_fails=1 fail_timeout=2s;
    # Backup server - only used when primary fails
    server ${BACKUP_HOST}:${APP_PORT} backup;
}

server {
    listen 8080;
    server_name _;

    # Tight timeouts
    proxy_connect_timeout 1s;
    proxy_send_timeout 5s;
    proxy_read_timeout 5s;

    # For retries: allow nginx to try the next upstream on error, timeout, or http 5xx.
    proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    proxy_next_upstream_tries 2;
    proxy_next_upstream_timeout 10s;

    # Pass client headers and IP
    location / {
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;

        # Forward request and preserve upstream headers to the client
        proxy_pass_header X-App-Pool;
        proxy_pass_header X-Release-Id;

        proxy_set_header Connection "";

        proxy_pass http://backend_upstream;
    }

    # Optional health endpoint to check NGINX health (local)
    location = /_nginx_health {
        return 200 "ok\n";
    }
}
EOF
}

echo "Generating nginx config for ACTIVE_POOL=${ACTIVE_POOL} ..."
generate_conf

echo "Starting nginx..."
# Start nginx in foreground (so docker container keeps running)
exec nginx -g 'daemon off;'
